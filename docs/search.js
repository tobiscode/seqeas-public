window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "seqeas", "modulename": "seqeas", "kind": "module", "doc": "<p>Initialization script</p>\n"}, {"fullname": "seqeas.kernels2d", "modulename": "seqeas.kernels2d", "kind": "module", "doc": "<p>Kernel functions for 2D subduction in an elastic halfspace.</p>\n"}, {"fullname": "seqeas.kernels2d.Glinedisp", "modulename": "seqeas.kernels2d", "qualname": "Glinedisp", "kind": "function", "doc": "<p>Compute the displacement Green's functions for a shearing and opening\nline crack in a halfspace. Adapted for Python from the <code>LDdispHS</code>\nMatlab function from [davis17]_. References to \"C&amp;S\" in the source code\nmean [crouchstarfield83]_.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x1</strong> (float, numpy.ndarray):\n\\( x_1 \\) location of evaluation points [m]</li>\n<li><strong>x2</strong> (float, numpy.ndarray):\n\\( x_2 \\) location of evaluation points [m]</li>\n<li><strong>x1midfp</strong> (float, numpy.ndarray):\n\\( x_1 \\) location of the midpoint of the fault patches [m]</li>\n<li><strong>x2midfp</strong> (float, numpy.ndarray):\n\\( x_2 \\) location of the midpoint of the fault patches [m]</li>\n<li><strong>halflen</strong> (float, numpy.ndarray):\nHalf-length of each fault patch [m]</li>\n<li><strong>theta</strong> (float, numpy.ndarray):\nThe angle [rad] between the fault patch orientation (not the fault\nnormal) and the \\( x_1 \\) axis in the mathematically negative sense,\ni.e. positive clockwise.</li>\n<li><strong>nu</strong> (float):\nPoisson's ratio [-]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>G</strong> (numpy.ndarray):\nDisplacement kernel for all patches and all evaluation points [m].\nThe first half of rows corresponds to the \\( xx \\) component,\nthe second one to \\( yy \\).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>To compute the displacement at the evaluation points given the shear and normal\ndisplacements \\( D_s \\) and \\( D_n \\) in each patch [m], with positive\nvalues meaning left-lateral shearing and crack opening, respectively,\nperform a matrix computation of the Green's functions with the displacements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<p>Calculate the stress kernel for three observation points and two fault\npatches:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">x1</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">(),</span> <span class=\"n\">x2</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1midfp</span><span class=\"p\">,</span> <span class=\"n\">x2midfp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">halflen</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">nu</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">Glinedisp</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x1midfp</span><span class=\"p\">,</span> <span class=\"n\">x2midfp</span><span class=\"p\">,</span> <span class=\"n\">halflen</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Calculate the displacement given left-lateral shearing and crack opening in\nboth patches:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ds</span><span class=\"p\">,</span> <span class=\"n\">Dn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">G</span> <span class=\"o\">@</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">Ds</span><span class=\"p\">,</span> <span class=\"n\">Dn</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">[ 0.289    nan -0.133 -0.094    nan  0.441]</span>\n</code></pre>\n</div>\n\n<p>(The <code>nan</code> values are where the fault patch breaks the surface.)</p>\n\n<h6 id=\"references\">References</h6>\n\n<p>.. [davis17] Davis, T. (2017).\n   <em>A new open source boundary element code and its application to geological</em>\n   <em>deformation: Exploring stress concentrations around voids and the effects</em>\n   <em>of 3D frictional distributions on fault surfaces</em> (M.Sc thesis. Aberdeen University)</p>\n\n<p>.. [crouchstarfield83] Crouch, S. L., &amp; Starfield, A. M. (1983).\n   <em>Boundary element methods in solid mechanics: with applications in rock</em>\n   <em>mechanics and geological engineering</em>. Allen &amp; Unwin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">x1midfp</span>, </span><span class=\"param\"><span class=\"n\">x2midfp</span>, </span><span class=\"param\"><span class=\"n\">halflen</span>, </span><span class=\"param\"><span class=\"n\">theta</span>, </span><span class=\"param\"><span class=\"n\">nu</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.kernels2d.Klinedisp", "modulename": "seqeas.kernels2d", "qualname": "Klinedisp", "kind": "function", "doc": "<p>Compute the stress kernel for a shearing and opening\nline crack in a halfspace. Adapted for Python from the <code>LDstressHS</code>\nMatlab function from [davis17]_. References to \"C&amp;S\" in the source code\nmean [crouchstarfield83]_.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x1</strong> (float, numpy.ndarray):\n\\( x_1 \\) location of evaluation points [m]</li>\n<li><strong>x2</strong> (float, numpy.ndarray):\n\\( x_2 \\) location of evaluation points [m]</li>\n<li><strong>x1midfp</strong> (float, numpy.ndarray):\n\\( x_1 \\) location of the midpoint of the fault patches [m]</li>\n<li><strong>x2midfp</strong> (float, numpy.ndarray):\n\\( x_2 \\) location of the midpoint of the fault patches [m]</li>\n<li><strong>halflen</strong> (float, numpy.ndarray):\nHalf-length of each fault patch [m]</li>\n<li><strong>theta</strong> (float, numpy.ndarray):\nThe angle [rad] between the fault patch orientation (not the fault\nnormal) and the \\( x_1 \\) axis in the mathematically negative sense,\ni.e. positive clockwise.</li>\n<li><strong>nu</strong> (float):\nPoisson's ratio [-]</li>\n<li><strong>E</strong> (float):\nYoung's modulus [Pa]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>K</strong> (numpy.ndarray):\nStress kernel for all patches and all evaluation points [m].\nThe first third of rows corresponds to the \\( xx \\) component,\nthe second to \\( yy \\), and the third to \\( xy \\).</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>To compute the stress at the evaluation points given the shear and normal\ndisplacements \\( D_s \\) and \\( D_n \\) in each patch [m], with positive\nvalues meaning left-lateral shearing and crack opening, respectively,\nperform a matrix computation of the stress kernel with the displacements.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<p>Calculate the stress kernel for three observation points and two fault\npatches:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">x1</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">(),</span> <span class=\"n\">x2</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x1midfp</span><span class=\"p\">,</span> <span class=\"n\">x2midfp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">halflen</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">Klinedisp</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x1midfp</span><span class=\"p\">,</span> <span class=\"n\">x2midfp</span><span class=\"p\">,</span> <span class=\"n\">halflen</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Calculate the stress given left-lateral shearing and crack opening in\nboth patches:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ds</span><span class=\"p\">,</span> <span class=\"n\">Dn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">K</span> <span class=\"o\">@</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">Ds</span><span class=\"p\">,</span> <span class=\"n\">Dn</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">[ 0.084    nan  0.119 -0.       nan  0.     0.       nan  0.   ]</span>\n</code></pre>\n</div>\n\n<p>(The <code>nan</code> values are where the fault patch breaks the surface.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">x1midfp</span>, </span><span class=\"param\"><span class=\"n\">x2midfp</span>, </span><span class=\"param\"><span class=\"n\">halflen</span>, </span><span class=\"param\"><span class=\"n\">theta</span>, </span><span class=\"param\"><span class=\"n\">nu</span>, </span><span class=\"param\"><span class=\"n\">E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d", "modulename": "seqeas.subduction2d", "kind": "module", "doc": "<p>Module containing the rheologies, fault setup, and ODE cycles code\nfor the 2D subduction case.</p>\n"}, {"fullname": "seqeas.subduction2d.Rheology", "modulename": "seqeas.subduction2d", "qualname": "Rheology", "kind": "class", "doc": "<p>Abstract base class for rheologies.</p>\n", "bases": "abc.ABC"}, {"fullname": "seqeas.subduction2d.NonlinearViscous", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous", "kind": "class", "doc": "<p>Implement a nonlinear viscous fault rheology, where the velocity \\( v \\) is\n\\( v = \\tau^n / \\alpha_n \\) given the shear stress \\( \\tau \\), a strength\nconstant \\( \\alpha_n \\), and a constant exponent \\( n \\).</p>\n", "bases": "Rheology"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.__init__", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.__init__", "kind": "function", "doc": "<p>Setup the rheology parameters for a given fault.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_n</strong> (float):\nNonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</li>\n<li><strong>n</strong> (float):\nPower-law exponent \\( n \\) [-]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n</span>,</span><span class=\"param\">\t<span class=\"n\">n_mid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_mid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mid_transition</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_deep</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_deep</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deep_transition</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deep_transition_width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_boundary</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_boundary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.n_vars", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.n_vars", "kind": "variable", "doc": "<p>Number of variables to track by rheology [-]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.n_boundary", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.n_boundary", "kind": "variable", "doc": "<p>Power-law exponent \\( n \\) [-]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.alpha_n", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.alpha_n", "kind": "variable", "doc": "<p>Nonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.alpha_n_mid", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.alpha_n_mid", "kind": "variable", "doc": "<p>Nonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.alpha_n_deep", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.alpha_n_deep", "kind": "variable", "doc": "<p>Nonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.alpha_n_boundary", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.alpha_n_boundary", "kind": "variable", "doc": "<p>Nonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.mid_transition", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.mid_transition", "kind": "variable", "doc": "<p>Depth [m] for the middle transition point</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.deep_transition", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.deep_transition", "kind": "variable", "doc": "<p>(Upper) Depth [m] for the deep transition point</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.deep_transition_width", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.deep_transition_width", "kind": "variable", "doc": "<p>(Downdip) Width [m] of the deep transition point</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.n", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.n", "kind": "variable", "doc": "<p>Power-law exponent \\( n \\) [-]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.n_mid", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.n_mid", "kind": "variable", "doc": "<p>Power-law exponent \\( n \\) [-]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.n_deep", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.n_deep", "kind": "variable", "doc": "<p>Power-law exponent \\( n \\) [-]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.A", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.A", "kind": "variable", "doc": "<p>Rescaled strength term \\( A = \\alpha_n^{1/n} \\) [Pa * (s/m)^(1/n)]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.A_mid", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.A_mid", "kind": "variable", "doc": "<p>Rescaled strength term \\( A = \\alpha_n^{1/n} \\) [Pa * (s/m)^(1/n)]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.A_deep", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.A_deep", "kind": "variable", "doc": "<p>Rescaled strength term \\( A = \\alpha_n^{1/n} \\) [Pa * (s/m)^(1/n)]</p>\n"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.calc_A", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.calc_A", "kind": "function", "doc": "<p>Calculate A from alpha_n and n</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha_n</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.NonlinearViscous.get_param_vectors", "modulename": "seqeas.subduction2d", "qualname": "NonlinearViscous.get_param_vectors", "kind": "function", "doc": "<p>Calculate the depth-dependent arrays of \\( \\alpha_n \\), \\( n \\), and \\( A \\),\nassuming \\( \\alpha_n \\) and \\( \\alpha_{n,eff} \\) vary log-linearly with depth,\nand \\( n \\) adapts between the transition points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">patch_depths</span>, </span><span class=\"param\"><span class=\"n\">v_eff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic", "kind": "class", "doc": "<p>Implement a steady-state rate-and-state rheology using the ageing law (effectively\nbecoming a rate-dependent rheology) with velocity in logarithmic space defined by</p>\n\n<p>\\( f_{ss} = f_0 + (a - b) * \\zeta = \\tau / \\sigma_E \\)</p>\n\n<p>where \\( f_{ss} \\) is the steady-state friction, \\( f_0 \\) is a reference\nfriction, \\( a \\) and \\( b \\) are the rate-and-state frictional parameters,\n\\( \\zeta = \\log (v / v_0) \\) is the logarithmic velocity, \\( \\tau \\) is the shear\nstress, and \\( \\sigma_E \\) is the effective fault normal stress.</p>\n", "bases": "Rheology"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.__init__", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.__init__", "kind": "function", "doc": "<p>Setup the rheology parameters for a given fault.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v_0</strong> (float):\nReference velocity [m/s] used for the transformation into logarithmic space.</li>\n<li><strong>alpha_h</strong> (float):\nRate-and-state parameter \\( (a - b) * \\sigma_E \\),\nwhere \\( a \\) and \\( b \\) [-] are the rate-and-state frictional properties,\nand \\( \\sigma_E \\) [Pa] is effective fault normal stress.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">v_0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_mid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mid_transition</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_deep</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deep_transition</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deep_transition_width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_boundary</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.alpha_h", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.alpha_h", "kind": "variable", "doc": "<p>Rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.n_vars", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.n_vars", "kind": "variable", "doc": "<p>Number of variables to track by rheology [-]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.v_0", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.v_0", "kind": "variable", "doc": "<p>Reference velocity \\( v_0 \\) [m/s]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.alpha_h_mid", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.alpha_h_mid", "kind": "variable", "doc": "<p>Middle rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.alpha_h_deep", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.alpha_h_deep", "kind": "variable", "doc": "<p>Deep rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.alpha_h_boundary", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.alpha_h_boundary", "kind": "variable", "doc": "<p>Boundary-layer rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.mid_transition", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.mid_transition", "kind": "variable", "doc": "<p>Depth [m] for the middle transition point</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.deep_transition", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.deep_transition", "kind": "variable", "doc": "<p>(Upper) Depth [m] for the deep transition point</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.deep_transition_width", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.deep_transition_width", "kind": "variable", "doc": "<p>(Downdip) Width [m] of the deep transition point</p>\n"}, {"fullname": "seqeas.subduction2d.RateStateSteadyLogarithmic.get_param_vectors", "modulename": "seqeas.subduction2d", "qualname": "RateStateSteadyLogarithmic.get_param_vectors", "kind": "function", "doc": "<p>Calculate the depth-dependent array of \\( \\alpha_h \\), assuming it\nvaries log-linearly with depth.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">patch_depths</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.dvdt_plvis", "modulename": "seqeas.subduction2d", "qualname": "dvdt_plvis", "kind": "function", "doc": "<p>Calculate the velocity derivative for a power-law viscous rheology.</p>\n\n<p>From \\( v = \\tau^n / \\alpha_n \\) we get:</p>\n\n<p>\\( \\frac{dv}{dt} = \\frac{n}{\\alpha_n} \\tau^{n-1} \\frac{d \\tau}{dt} \\)</p>\n\n<p>where</p>\n\n<p>\\( \\tau^{n-1} = \\left( \\alpha_n v \\right)^{\\frac{n-1}{n}} \\)</p>\n\n<p>simplifying to</p>\n\n<p>\\( \\frac{dv}{dt} = \\frac{n}{A} v^{1-\\frac{1}{n}} \\frac{d \\tau}{dt} \\)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dtaudt</strong> (numpy.ndarray):\n1D array of the shear stress derivative</li>\n<li><strong>v</strong> (numpy.ndarray):\n1D array of the current velocity</li>\n<li><strong>A</strong> (numpy.ndarray):\nRescaled nonlinear viscous rheology strength constant</li>\n<li><strong>n</strong> (numpy.ndarray):\nPower-law exponent</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dvdt</strong> (numpy.ndarray):\n1D array of the velocity derivative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dtaudt</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.dzetadt_rdlog", "modulename": "seqeas.subduction2d", "qualname": "dzetadt_rdlog", "kind": "function", "doc": "<p>Return the velocity derivative in logarithmic space given the current traction\nrate in linear space.</p>\n\n<p>Taking the derivative of the steady-state friction gives an explicit\nformulation for the slip acceleration \\( \\frac{d \\zeta}{dt} \\):</p>\n\n<p>\\( \\frac{df_{ss}}{dt} = (a-b) \\frac{d \\zeta}{dt} \\)</p>\n\n<p>Recognizing that \\( \\tau = f_{ss} \\sigma_E \\) and assuming\nconstant effective normal stress leads to\n\\( \\frac{d \\tau}{dt} = \\sigma_E \\frac{df_{ss}}{dt} \\), which\ncan be rearranged to give the final expression</p>\n\n<p>\\( \\frac{d \\zeta}{dt} = \\frac{1}{(a-b) \\sigma_E} \\frac{d \\tau}{dt} \\)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dtaudt</strong> (numpy.ndarray):\nTraction derivative \\( \\frac{d \\tau}{dt} \\) [Pa/s] in linear space</li>\n<li><strong>alpha_h_vec</strong> (float):\nRate-and-state parameter \\( (a - b) * \\sigma_E \\)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dzetadt</strong> (numpy.ndarray):\nVelocity derivative \\( \\frac{d \\zeta}{dt} \\) [1/s] in logarithmic space.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dtaudt</span>, </span><span class=\"param\"><span class=\"n\">alpha_h_vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.get_new_vel_plvis", "modulename": "seqeas.subduction2d", "qualname": "get_new_vel_plvis", "kind": "function", "doc": "<p>Calculate the instantaneous velocity change due to an instantaneous stress change\nto the fault patches. It is derived from:</p>\n\n<p>\\( \\tau_{+} = \\tau_{-} + \\Delta \\tau \\)</p>\n\n<p>and plugging in the relationship \\( v = \\tau^n / \\alpha_n \\), we get</p>\n\n<p>\\( \\sqrt[n]{\\alpha_n v_{+}} = \\sqrt[n]{\\alpha_n v_{-}} + \\Delta \\tau \\)</p>\n\n<p>and finally</p>\n\n<p>\\( v_{+} = \\frac{\\left( A \\sqrt[n]{v_{-}} + \\Delta \\tau \\right)^n}{\\alpha_n} \\)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v_minus</strong> (numpy.ndarray):\nInitial velocity \\( v_{-} \\) [m/s]</li>\n<li><strong>delta_tau</strong> (numpy.ndarray):\nTraction stress change \\( \\Delta \\tau \\) [Pa]</li>\n<li><strong>alpha_n</strong> (numpy.ndarray):\nNonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</li>\n<li><strong>n</strong> (numpy.ndarray):\nPower-law exponent \\( n \\) [-]</li>\n<li><strong>A</strong> (numpy.ndarray):\nRescaled strength term \\( A = \\alpha_n^{1/n} \\) [Pa * (s/m)^(1/n)]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>v_plus</strong> (numpy.ndarray):\nVelocity \\( v_{+} \\) [m/s] after stress change</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v_minus</span>, </span><span class=\"param\"><span class=\"n\">delta_tau</span>, </span><span class=\"param\"><span class=\"n\">alpha_n</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.get_new_vel_rdlog", "modulename": "seqeas.subduction2d", "qualname": "get_new_vel_rdlog", "kind": "function", "doc": "<p>Calculate the instantaneous velocity change (in logarithmic space) due to an\ninstantaneous stress change to the fault patches. We can kickstart the\nderivatuion from the expression in <code>RateStateSteadyLinear.get_new_vel</code>:</p>\n\n<p>\\( \\log (v_{+}/v_0) = \\log (v_{-}/v_0) + \\Delta\\tau / \\alpha_h \\)</p>\n\n<p>and realize that we only have to plug in our definition for \\( \\zeta \\)\nto give us the final result</p>\n\n<p>\\( \\zeta_{+} = \\zeta_{-} + \\Delta\\tau / \\alpha_h \\)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>zeta_minus</strong> (numpy.ndarray):\nInitial velocity \\( \\zeta_{-} \\) [-] in logarithmic space</li>\n<li><strong>delta_tau</strong> (numpy.ndarray, optional):\nTraction stress change \\( \\Delta \\tau \\) [Pa]</li>\n<li><strong>alpha_h_vec</strong> (numpy.ndarray):\nRate-and-state parameter \\( (a - b) * \\sigma_E \\)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>zeta_plus</strong> (numpy.ndarray):\nVelocity \\( \\zeta_{+} \\) [-] in logarithmic space after stress change</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>alpha_h</code>  </p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">zeta_minus</span>, </span><span class=\"param\"><span class=\"n\">delta_tau</span>, </span><span class=\"param\"><span class=\"n\">alpha_h_vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_ode_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_ode_plvis", "kind": "function", "doc": "<p>Flattened ODE derivative function for a subduction fault with\npowerlaw-viscous rheology in the upper plate interface, and an imposed\nconstant plate velocity at the lower interface (which can be ignored).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent time (needs to be in function call for solve_ivp).</li>\n<li><strong>state</strong> (numpy.ndarray):\n1D array with the current state of the creeping fault patches,\ncontaining (in order) the upper cumulative slip and upper velocity.</li>\n<li><strong>v_plate</strong> (float):\nPlate velocity.</li>\n<li><strong>K_int</strong> (numpy.ndarray):\n2D array with the stress kernel mapping creeping patches to themselves.</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\n2D array with the stress kernel mapping the effect of the locked\npatches onto the creeping patches.</li>\n<li><strong>A_upper</strong> (numpy.ndarray):\nUpper plate interface rescaled nonlinear viscous rheology strength constant</li>\n<li><strong>n_upper</strong> (numpy.ndarray):\nUpper plate interface power-law exponent</li>\n<li><strong>mu_over_2vs</strong> (float):\nRadiation damping factor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dstatedt</strong> (numpy.ndarray):\n1D array with the state derivative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">v_plate</span>, </span><span class=\"param\"><span class=\"n\">K_int</span>, </span><span class=\"param\"><span class=\"n\">K_ext</span>, </span><span class=\"param\"><span class=\"n\">A_upper</span>, </span><span class=\"param\"><span class=\"n\">n_upper</span>, </span><span class=\"param\"><span class=\"n\">mu_over_2vs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_ode_rdlog", "modulename": "seqeas.subduction2d", "qualname": "flat_ode_rdlog", "kind": "function", "doc": "<p>Flattened ODE derivative function for a subduction fault with\npowerlaw-viscous rheology in the upper plate interface, and an imposed\nconstant plate velocity at the lower interface (which can be ignored).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent time (needs to be in function call for solve_ivp).</li>\n<li><strong>state</strong> (numpy.ndarray):\n1D array with the current state of the creeping fault patches,\ncontaining (in order) the upper cumulative slip and upper velocity.</li>\n<li><strong>v_plate</strong> (float):\nPlate velocity.</li>\n<li><strong>K_int</strong> (numpy.ndarray):\n2D array with the stress kernel mapping creeping patches to themselves.</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\n2D array with the stress kernel mapping the effect of the locked\npatches onto the creeping patches.</li>\n<li><strong>v_0</strong> (float):\nReference velocity [m/s]</li>\n<li><strong>alpha_h_vec</strong> (numpy.ndarray):\nRate-and-state parameter \\( (a - b) * \\sigma_E \\)</li>\n<li><strong>mu_over_2vs</strong> (float):\nRadiation damping factor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dstatedt</strong> (numpy.ndarray):\n1D array with the state derivative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">v_plate</span>, </span><span class=\"param\"><span class=\"n\">K_int</span>, </span><span class=\"param\"><span class=\"n\">K_ext</span>, </span><span class=\"param\"><span class=\"n\">v_0</span>, </span><span class=\"param\"><span class=\"n\">alpha_h_vec</span>, </span><span class=\"param\"><span class=\"n\">mu_over_2vs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_ode_plvis_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_ode_plvis_plvis", "kind": "function", "doc": "<p>Flattened ODE derivative function for a subduction fault with\npowerlaw-viscous rheology in both the upper and lower plate interface.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent time (needs to be in function call for solve_ivp).</li>\n<li><strong>state</strong> (numpy.ndarray):\n1D array with the current state of the creeping fault patches,\ncontaining (in order) the upper cumulative slip, upper velocity,\nlower cumulative slip, lower velocity.</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber of creeping patches in the upper plate interface.\nThe number of creeping patches in the lower plate interface can then\nbe derived from the size of <code>state</code>.</li>\n<li><strong>v_plate_vec</strong> (float):\nInitial velocity in all creeping patches.</li>\n<li><strong>K_int</strong> (numpy.ndarray):\n2D array with the stress kernel mapping creeping patches to themselves.</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\n2D array with the stress kernel mapping the effect of the locked\npatches onto the creeping patches.</li>\n<li><strong>A_upper</strong> (float):\nUpper plate interface rescaled nonlinear viscous rheology strength constant</li>\n<li><strong>n_upper</strong> (float):\nUpper plate interface power-law exponent</li>\n<li><strong>A_lower</strong> (float):\nLower plate interface rescaled nonlinear viscous rheology strength constant</li>\n<li><strong>n_lower</strong> (float):\nLower plate interface power-law exponent</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dstatedt</strong> (numpy.ndarray):\n1D array with the state derivative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t</span>,</span><span class=\"param\">\t<span class=\"n\">state</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">A_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_upper</span>,</span><span class=\"param\">\t<span class=\"n\">A_lower</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_ode_rdlog_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_ode_rdlog_plvis", "kind": "function", "doc": "<p>Flattened ODE derivative function for a subduction fault with\nrate-dependent (log-space) rheology in the upper and nonlinear viscous\nrheology in the lower plate interface.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nCurrent time (needs to be in function call for solve_ivp).</li>\n<li><strong>state</strong> (numpy.ndarray):\n1D array with the current state of the creeping fault patches,\ncontaining (in order) the upper cumulative slip, upper velocity,\nlower cumulative slip, lower velocity.</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber of creeping patches in the upper plate interface.\nThe number of creeping patches in the lower plate interface can then\nbe derived from the size of <code>state</code>.</li>\n<li><strong>v_plate_vec</strong> (float):\nInitial velocity in all creeping patches.</li>\n<li><strong>K_int</strong> (numpy.ndarray):\n2D array with the stress kernel mapping creeping patches to themselves.</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\n2D array with the stress kernel mapping the effect of the locked\npatches onto the creeping patches.</li>\n<li><strong>v_0</strong> (float):\nReference velocity [m/s]</li>\n<li><strong>alpha_h_upper</strong> (float):\nUpper interface rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</li>\n<li><strong>A_lower</strong> (float):\nLower plate interface rescaled nonlinear viscous rheology strength constant</li>\n<li><strong>n_lower</strong> (float):\nLower plate interface power-law exponent</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dstatedt</strong> (numpy.ndarray):\n1D array with the state derivative.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t</span>,</span><span class=\"param\">\t<span class=\"n\">state</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">v_0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_upper</span>,</span><span class=\"param\">\t<span class=\"n\">A_lower</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.myrk4", "modulename": "seqeas.subduction2d", "qualname": "myrk4", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ti</span>,</span><span class=\"param\">\t<span class=\"n\">tf</span>,</span><span class=\"param\">\t<span class=\"n\">state0</span>,</span><span class=\"param\">\t<span class=\"n\">t_eval</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">A_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_upper</span>,</span><span class=\"param\">\t<span class=\"n\">A_lower</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_run_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_run_plvis", "kind": "function", "doc": "<p>Run the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t_eval</strong> (numpy.ndarray):\nEvaluation times [s]</li>\n<li><strong>i_break</strong> (numpy.ndarray):\nInteger indices of cycle breaks [-]</li>\n<li><strong>i_eq</strong> (numpy.ndarray):\nInteger indices of earthquakes within sequence [-]</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber [-] of creeping patches in the upper fault interface</li>\n<li><strong>n_creeping_lower</strong> (int):\nNumber [-] of creeping patches in the lower fault interface</li>\n<li><strong>K_int</strong> (numpy.ndarray):\nInternal stress kernel [Pa/m]</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\nExternal stress kernel [Pa/m]</li>\n<li><strong>v_plate_vec</strong> (numpy.ndarray):\nPlate velocity for all creeping patches [m/s]</li>\n<li><strong>v_init</strong> (numpy.ndarray):\nInitial velocity of the fault patches, in the dimensions of the rheology</li>\n<li><strong>slip_taper</strong> (numpy.ndarray):\nCompensating coseismic tapered slip on creeping patches [m]</li>\n<li><strong>delta_tau_bounded</strong> (numpy.ndarray):\nBounded coseismic stress change [Pa]</li>\n<li><strong>alpha_n_vec</strong> (numpy.ndarray):\nUpper plate interface nonlinear viscous rheology strength constant [Pa^n * s/m]\nat each patch</li>\n<li><strong>n_vec</strong> (float):\nUpper plate interface power-law exponent [-] at each patch</li>\n<li><strong>A_vec</strong> (float):\nRescaled upper plate interface nonlinear viscous rheology strength constant\n[Pa^n * s/m] at each patch</li>\n<li><strong>mu_over_2vs</strong> (float):\nRadiation damping factor \\( \\mu / 2 v_s \\), where \\( \\mu \\) is the shear\nmodulus [Pa] and \\( v_s \\) is the shear wave velocity [m/s]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nFull state variable at the end of the integration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_eval</span>,</span><span class=\"param\">\t<span class=\"n\">i_break</span>,</span><span class=\"param\">\t<span class=\"n\">i_eq</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_lower</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">v_init</span>,</span><span class=\"param\">\t<span class=\"n\">slip_taper</span>,</span><span class=\"param\">\t<span class=\"n\">delta_tau_bounded</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_vec</span>,</span><span class=\"param\">\t<span class=\"n\">n_vec</span>,</span><span class=\"param\">\t<span class=\"n\">A_vec</span>,</span><span class=\"param\">\t<span class=\"n\">mu_over_2vs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_run_rdlog", "modulename": "seqeas.subduction2d", "qualname": "flat_run_rdlog", "kind": "function", "doc": "<p>Run the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t_eval</strong> (numpy.ndarray):\nEvaluation times [s]</li>\n<li><strong>i_break</strong> (numpy.ndarray):\nInteger indices of cycle breaks [-]</li>\n<li><strong>i_eq</strong> (numpy.ndarray):\nInteger indices of earthquakes within sequence [-]</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber [-] of creeping patches in the upper fault interface</li>\n<li><strong>n_creeping_lower</strong> (int):\nNumber [-] of creeping patches in the lower fault interface</li>\n<li><strong>K_int</strong> (numpy.ndarray):\nInternal stress kernel [Pa/m]</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\nExternal stress kernel [Pa/m]</li>\n<li><strong>v_plate_vec</strong> (numpy.ndarray):\nPlate velocity for all creeping patches [m/s]</li>\n<li><strong>v_init</strong> (numpy.ndarray):\nInitial velocity of the fault patches, in the dimensions of the rheology</li>\n<li><strong>slip_taper</strong> (numpy.ndarray):\nCompensating coseismic tapered slip on creeping patches [m]</li>\n<li><strong>delta_tau_bounded</strong> (numpy.ndarray):\nBounded coseismic stress change [Pa]</li>\n<li><strong>v_0</strong> (float):\nReference velocity [m/s]</li>\n<li><strong>alpha_h_vec</strong> (numpy.ndarray):\nUpper interface rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</li>\n<li><strong>mu_over_2vs</strong> (float):\nRadiation damping factor \\( \\mu / 2 v_s \\), where \\( \\mu \\) is the shear\nmodulus [Pa] and \\( v_s \\) is the shear wave velocity [m/s]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nFull state variable at the end of the integration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_eval</span>,</span><span class=\"param\">\t<span class=\"n\">i_break</span>,</span><span class=\"param\">\t<span class=\"n\">i_eq</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_lower</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">v_init</span>,</span><span class=\"param\">\t<span class=\"n\">slip_taper</span>,</span><span class=\"param\">\t<span class=\"n\">delta_tau_bounded</span>,</span><span class=\"param\">\t<span class=\"n\">v_0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_vec</span>,</span><span class=\"param\">\t<span class=\"n\">mu_over_2vs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_run_plvis_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_run_plvis_plvis", "kind": "function", "doc": "<p>Run the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t_eval</strong> (numpy.ndarray):\nEvaluation times [s]</li>\n<li><strong>i_break</strong> (numpy.ndarray):\nInteger indices of cycle breaks [-]</li>\n<li><strong>i_eq</strong> (numpy.ndarray):\nInteger indices of earthquakes within sequence [-]</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber [-] of creeping patches in the upper fault interface</li>\n<li><strong>n_creeping_lower</strong> (int):\nNumber [-] of creeping patches in the lower fault interface</li>\n<li><strong>K_int</strong> (numpy.ndarray):\nInternal stress kernel [Pa/m]</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\nExternal stress kernel [Pa/m]</li>\n<li><strong>v_plate_vec</strong> (numpy.ndarray):\nPlate velocity for all creeping patches [m/s]</li>\n<li><strong>v_init</strong> (numpy.ndarray):\nInitial velocity of the fault patches, in the dimensions of the rheology</li>\n<li><strong>slip_taper</strong> (numpy.ndarray):\nCompensating coseismic tapered slip on creeping patches [m]</li>\n<li><strong>delta_tau_bounded</strong> (numpy.ndarray):\nBounded coseismic stress change [Pa]</li>\n<li><strong>alpha_n_upper</strong> (float):\nUpper plate interface nonlinear viscous rheology strength constant  [Pa^n * s/m]</li>\n<li><strong>n_upper</strong> (float):\nUpper plate interface power-law exponent [-]</li>\n<li><strong>alpha_n_lower</strong> (float):\nLower plate interface nonlinear viscous rheology strength constant  [Pa^n * s/m]</li>\n<li><strong>n_lower</strong> (float):\nLower plate interface power-law exponent [-]</li>\n<li><strong>simple_rk4</strong> (bool):\nDecide whether to use the simple RK4 integrator or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nFull state variable at the end of the integration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_eval</span>,</span><span class=\"param\">\t<span class=\"n\">i_break</span>,</span><span class=\"param\">\t<span class=\"n\">i_eq</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_lower</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">v_init</span>,</span><span class=\"param\">\t<span class=\"n\">slip_taper</span>,</span><span class=\"param\">\t<span class=\"n\">delta_tau_bounded</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_upper</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_lower</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower</span>,</span><span class=\"param\">\t<span class=\"n\">simple_rk4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.flat_run_rdlog_plvis", "modulename": "seqeas.subduction2d", "qualname": "flat_run_rdlog_plvis", "kind": "function", "doc": "<p>Run the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t_eval</strong> (numpy.ndarray):\nEvaluation times [s]</li>\n<li><strong>i_break</strong> (numpy.ndarray):\nInteger indices of cycle breaks [-]</li>\n<li><strong>i_eq</strong> (numpy.ndarray):\nInteger indices of earthquakes within sequence [-]</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber [-] of creeping patches in the upper fault interface</li>\n<li><strong>n_creeping_lower</strong> (int):\nNumber [-] of creeping patches in the lower fault interface</li>\n<li><strong>K_int</strong> (numpy.ndarray):\nInternal stress kernel [Pa/m]</li>\n<li><strong>K_ext</strong> (numpy.ndarray):\nExternal stress kernel [Pa/m]</li>\n<li><strong>v_plate_vec</strong> (numpy.ndarray):\nPlate velocity for all creeping patches [m/s]</li>\n<li><strong>v_init</strong> (numpy.ndarray):\nInitial velocity of the fault patches, in the dimensions of the rheology</li>\n<li><strong>slip_taper</strong> (numpy.ndarray):\nCompensating coseismic tapered slip on creeping patches [m]</li>\n<li><strong>delta_tau_bounded</strong> (numpy.ndarray):\nBounded coseismic stress change [Pa]</li>\n<li><strong>v_0</strong> (float):\nReference velocity [m/s]</li>\n<li><strong>alpha_h_upper</strong> (float):\nUpper interface rate-and-state parameter \\( (a - b) * \\sigma_E \\) [Pa]</li>\n<li><strong>alpha_n_lower</strong> (float):\nLower plate interface nonlinear viscous rheology strength constant  [Pa^n * s/m]</li>\n<li><strong>n_lower</strong> (float):\nLower plate interface power-law exponent [-]</li>\n<li><strong>simple_rk4</strong> (bool):\nDecide whether to use the simple RK4 integrator or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nFull state variable at the end of the integration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_eval</span>,</span><span class=\"param\">\t<span class=\"n\">i_break</span>,</span><span class=\"param\">\t<span class=\"n\">i_eq</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_lower</span>,</span><span class=\"param\">\t<span class=\"n\">K_int</span>,</span><span class=\"param\">\t<span class=\"n\">K_ext</span>,</span><span class=\"param\">\t<span class=\"n\">v_plate_vec</span>,</span><span class=\"param\">\t<span class=\"n\">v_init</span>,</span><span class=\"param\">\t<span class=\"n\">slip_taper</span>,</span><span class=\"param\">\t<span class=\"n\">delta_tau_bounded</span>,</span><span class=\"param\">\t<span class=\"n\">v_0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_h_upper</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_n_lower</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower</span>,</span><span class=\"param\">\t<span class=\"n\">simple_rk4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.get_surface_displacements_plvis_plvis", "modulename": "seqeas.subduction2d", "qualname": "get_surface_displacements_plvis_plvis", "kind": "function", "doc": "<p>Calculate the surface displacements given the output of <code>run</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nFull state variable at the end of the integration.</li>\n<li><strong>n_creeping_upper</strong> (int):\nNumber [-] of creeping patches in the upper fault interface</li>\n<li><strong>n_creeping_lower</strong> (int):\nNumber [-] of creeping patches in the lower fault interface</li>\n<li><strong>G_surf</strong> (numpy.ndarray):\nSurface displacements Green's matrix [-] (dimensions must whether <code>locked_slip</code>\nand/or <code>deep_creep_slip</code> are passed to function)</li>\n<li><strong>deep_creep_slip</strong> (numpy.ndarray):\nTimeseries of slip [m] on the deep creep patches</li>\n<li><strong>locked_slip</strong> (numpy.ndarray, optional):\nTimeseries of slip [m] on the locked patches</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>surf_disp</strong> (numpy.ndarray):\nSurface displacement timeseries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">full_state</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_upper</span>,</span><span class=\"param\">\t<span class=\"n\">n_creeping_lower</span>,</span><span class=\"param\">\t<span class=\"n\">G_surf</span>,</span><span class=\"param\">\t<span class=\"n\">deep_creep_slip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.Fault2D", "modulename": "seqeas.subduction2d", "qualname": "Fault2D", "kind": "class", "doc": "<p>Base class for the subduction fault mesh.</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.__init__", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.__init__", "kind": "function", "doc": "<p>Define the fault mesh of the subduction zone fault system, based on the\nElastic Subducting Plate Model (ESPM) of [kanda2010]_.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>theta</strong> (float):\nDip angle [rad] of the plate interface (positive).</li>\n<li><strong>D_lock</strong> (float):\nLocking depth [m] of the upper plate interface (positive).</li>\n<li><strong>H</strong> (float):\nSubducting plate thickness [m].</li>\n<li><strong>nu</strong> (float):\nPoisson's ratio [-] of the fault zone.</li>\n<li><strong>E</strong> (float):\nYoung's modulus [Pa] of the fault zone.</li>\n<li><strong>v_s</strong> (float):\nShear wave velocity [m/s] in the fault zone.</li>\n<li><strong>halflen</strong> (float):\nFault patch half-length [m], used for all locked patches.\nIf <code>D_max</code> and <code>x1_pretrench</code> are not set, this length is also used for all\ncreeping patches, otherwise, this is their minimum half-length.</li>\n<li><strong>upper_rheo</strong> (Rheology):\nUpper plate interface's rheology.</li>\n<li><strong>n_upper</strong> (int):\nNumber [-] of patches on upper plate interface.</li>\n<li><strong>lower_rheo</strong> (Rheology):\nLower plate interface's rheology. Pass <code>None</code> if it should not be simulated,\nbut enforced to have the plate velocity.</li>\n<li><strong>n_lower_left</strong> (int):\nNumber [-] of patches on lower plate interface (left of the bend).</li>\n<li><strong>n_lower_right</strong> (int):\nNumber [-] of patches on lower plate interface (right of the bend).</li>\n<li><strong>halflen_factor_lower</strong> (float):\nFactor used to get a different minimum half-length of the patches on the lower\nplate interface.</li>\n<li><strong>D_max</strong> (float, optional):\nMaximum depth [m] of the upper plate interface (positive).\nIf set, this makes the mesh use linearly-increasing patch sizes away from the\nlocked zone. (<code>x1_pretrench</code> must be set as well.)</li>\n<li><strong>x1_pretrench</strong> (float, optional):\nHorizontal distance [m] of the lower plate interface before the trench (positive).\nIf set, this makes the mesh use linearly-increasing patch sizes away from the\nlocked zone. (<code>D_max</code> must be set as well.)</li>\n</ul>\n\n<h6 id=\"references\">References</h6>\n\n<p>.. [kanda2010] Kanda, R. V. S., &amp; Simons, M. (2010).\n   <em>An elastic plate model for interseismic deformation in subduction zones.</em>\n   Journal of Geophysical Research: Solid Earth, 115(B3).\n   doi:<a href=\"https://doi.org/10.1029/2009JB006611\">10.1029/2009JB006611 </a>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">theta</span>,</span><span class=\"param\">\t<span class=\"n\">D_lock</span>,</span><span class=\"param\">\t<span class=\"n\">H</span>,</span><span class=\"param\">\t<span class=\"n\">nu</span>,</span><span class=\"param\">\t<span class=\"n\">E</span>,</span><span class=\"param\">\t<span class=\"n\">v_s</span>,</span><span class=\"param\">\t<span class=\"n\">halflen</span>,</span><span class=\"param\">\t<span class=\"n\">upper_rheo</span>,</span><span class=\"param\">\t<span class=\"n\">n_upper</span>,</span><span class=\"param\">\t<span class=\"n\">lower_rheo</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower_left</span>,</span><span class=\"param\">\t<span class=\"n\">n_lower_right</span>,</span><span class=\"param\">\t<span class=\"n\">halflen_factor_lower</span>,</span><span class=\"param\">\t<span class=\"n\">D_max</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x1_pretrench</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "seqeas.subduction2d.Fault2D.theta", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.theta", "kind": "variable", "doc": "<p>Subducting plate dip angle [rad]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.D_lock", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.D_lock", "kind": "variable", "doc": "<p>Theoretical locking depth [m] of the upper plate interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.H", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.H", "kind": "variable", "doc": "<p>Subducting plate thickness [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.nu", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.nu", "kind": "variable", "doc": "<p>Poisson's ratio [-] of the fault zone</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.E", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.E", "kind": "variable", "doc": "<p>Young's modulus [Pa] of the fault zone</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.halflen", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.halflen", "kind": "variable", "doc": "<p>Fault patch half-length [m] on upper interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.upper_rheo", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.upper_rheo", "kind": "variable", "doc": "<p>Upper plate interface's rheology</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_upper", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_upper", "kind": "variable", "doc": "<p>Number [-] of patches on upper plate interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.lower_rheo", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.lower_rheo", "kind": "variable", "doc": "<p>Lower plate interface's rheology</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_lower_left", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_lower_left", "kind": "variable", "doc": "<p>Number [-] of patches on lower plate interface (left of bend)</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_lower_right", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_lower_right", "kind": "variable", "doc": "<p>Number [-] of patches on lower plate interface (right of bend)</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.halflen_factor_lower", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.halflen_factor_lower", "kind": "variable", "doc": "<p>Prefactor [-] to change the lower interface half-length</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.lower_halflen", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.lower_halflen", "kind": "variable", "doc": "<p>Fault patch half-length [m] on lower interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.v_s", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.v_s", "kind": "variable", "doc": "<p>Shear wave velocity [m/s] in the fault zone</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mu_over_2vs", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mu_over_2vs", "kind": "variable", "doc": "<p>Radiation damping term [Pa * s/m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.D_max", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.D_max", "kind": "variable", "doc": "<p>Maximum depth [m] of the upper plate interface (optional)</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.x1_pretrench", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.x1_pretrench", "kind": "variable", "doc": "<p>Horizontal distance [m] of the lower plate interface before the trench (optional)</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.variable_mesh", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.variable_mesh", "kind": "variable", "doc": "<p>Flag whether the creeping patches are linearly-varying in size, or not</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.halflen_vec", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.halflen_vec", "kind": "variable", "doc": "<p>Half-lengths [m] for each patch in the fault</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.end_upper", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.end_upper", "kind": "variable", "doc": "<p>2-element coordinates of upper fault patch endpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.end_lower", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.end_lower", "kind": "variable", "doc": "<p>2-element coordinates of lower fault patch endpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.end", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.end", "kind": "variable", "doc": "<p>2-element coordinates of fault patch endpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid", "kind": "variable", "doc": "<p>2-element coordinates of fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x1", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x1", "kind": "variable", "doc": "<p>\\( x_1 \\) coordinates of fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x2", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x2", "kind": "variable", "doc": "<p>\\( x_2 \\) coordinates of fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.ix_upper", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.ix_upper", "kind": "variable", "doc": "<p>Mask of upper fault interface patches</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.ix_lower", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.ix_lower", "kind": "variable", "doc": "<p>Mask of lower fault interface patches (if existing)</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.x1_lock", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.x1_lock", "kind": "variable", "doc": "<p>Theoretical surface location [m] of end of locked interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.ix_locked", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.ix_locked", "kind": "variable", "doc": "<p>Mask of fault patches that are locked interseismically</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_locked", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_locked", "kind": "variable", "doc": "<p>Number [-] of locked patches</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_creeping", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_creeping", "kind": "variable", "doc": "<p>Number [-] of creeping patches</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_creeping_upper", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_creeping_upper", "kind": "variable", "doc": "<p>Number [-] of creeping patches in the upper fault interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_creeping_lower", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_creeping_lower", "kind": "variable", "doc": "<p>Number [-] of creeping patches in the lower fault interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x1_locked", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x1_locked", "kind": "variable", "doc": "<p>\\( x_1 \\) coordinates of locked fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x2_locked", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x2_locked", "kind": "variable", "doc": "<p>\\( x_2 \\) coordinates of locked fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x1_creeping", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x1_creeping", "kind": "variable", "doc": "<p>\\( x_1 \\) coordinates of creeping fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.mid_x2_creeping", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.mid_x2_creeping", "kind": "variable", "doc": "<p>\\( x_2 \\) coordinates of creeping fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.theta_vec", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.theta_vec", "kind": "variable", "doc": "<p>Plate dip angle [rad] for all fault patches</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.e_f", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.e_f", "kind": "variable", "doc": "<p>Unit vectors [-] normal to fault patches</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.e_s", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.e_s", "kind": "variable", "doc": "<p>Unit vectors [-] in fault patch slip direction</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.K_ext", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.K_ext", "kind": "variable", "doc": "<p>External stress kernel [Pa/m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.K_int", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.K_int", "kind": "variable", "doc": "<p>Internal stress kernel [Pa/m]</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_state_upper", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_state_upper", "kind": "variable", "doc": "<p>Size [-] of upper plate interface state variable</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.n_state_lower", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.n_state_lower", "kind": "variable", "doc": "<p>Size [-] of lower plate interface state variable</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.D_lock_disc", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.D_lock_disc", "kind": "variable", "doc": "<p>Discretized locking depth [m] of the upper plate interface</p>\n"}, {"fullname": "seqeas.subduction2d.Fault2D.x1_lock_disc", "modulename": "seqeas.subduction2d", "qualname": "Fault2D.x1_lock_disc", "kind": "variable", "doc": "<p>Discretized surface location [m] of end of locked interface</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation", "kind": "class", "doc": "<p>Subduction simulation container class.</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.__init__", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.__init__", "kind": "function", "doc": "<p>Create a subduction simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>v_plate</strong> (float):\nNominal far-field plate velocity, in the dimensions of the rheology</li>\n<li><strong>n_cycles_max</strong> (int):\nMaximum number of cycles to simulate [-]</li>\n<li><strong>n_samples_per_eq</strong> (int):\nNumber of internal evaluation timesteps between earthquakes [-]</li>\n<li><strong>delta_tau_max</strong> (float):\nMaximum shear stress change [Pa] from coseismic slip on locked patches</li>\n<li><strong>v_max</strong> (float):\nMaximum slip velocity [m/s] on creeping patches</li>\n<li><strong>fault</strong> (Fault2D):\nFault object</li>\n<li><strong>Ds_0</strong> (numpy.ndarray):\nNominal coseismic left-lateral shearing [m] of the locked fault patch(es)</li>\n<li><strong>Ds_0_logsigma</strong> (numpy.ndarray):\nStandard deviation of the fault slip in logarithmic space</li>\n<li><strong>T_rec</strong> (numpy.ndarray):\nNominal recurrence time [a] for each earthquake</li>\n<li><strong>T_rec_logsigma</strong> (numpy.ndarray):\nStandard deviation of the recurrence time in logarithmic space</li>\n<li><strong>D_asp_min</strong> (numpy.ndarray):\nMinimum depth [m] for the asperities of each earthquake</li>\n<li><strong>D_asp_max</strong> (numpy.ndarray):\nMaximum depth [m] for the asperities of each earthquake</li>\n<li><strong>T_anchor</strong> (str):\nAnchor date where observations end</li>\n<li><strong>T_last</strong> (list):\nDates of the last occurence for each earthquake (list of strings)</li>\n<li><strong>enforce_v_plate</strong> (bool):\nFlag whether to allow v_plate to vary or not</li>\n<li><strong>largehalflen</strong> (float):\nFault patch half-length of the deep crreep patches [m]</li>\n<li><strong>t_obs</strong> (numpy.ndarray, pandas.DatetimeIndex):\nObservation timesteps, either as decimal years relative to the cycle start,\nor as Timestamps</li>\n<li><strong>pts_surf</strong> (numpy.ndarray):\nHorizontal landward observation coordinates [m] relative to the trench</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">v_plate</span>,</span><span class=\"param\">\t<span class=\"n\">n_cycles_max</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples_per_eq</span>,</span><span class=\"param\">\t<span class=\"n\">delta_tau_max</span>,</span><span class=\"param\">\t<span class=\"n\">v_max</span>,</span><span class=\"param\">\t<span class=\"n\">fault</span>,</span><span class=\"param\">\t<span class=\"n\">Ds_0</span>,</span><span class=\"param\">\t<span class=\"n\">Ds_0_logsigma</span>,</span><span class=\"param\">\t<span class=\"n\">T_rec</span>,</span><span class=\"param\">\t<span class=\"n\">T_rec_logsigma</span>,</span><span class=\"param\">\t<span class=\"n\">D_asp_min</span>,</span><span class=\"param\">\t<span class=\"n\">D_asp_max</span>,</span><span class=\"param\">\t<span class=\"n\">T_anchor</span>,</span><span class=\"param\">\t<span class=\"n\">T_last</span>,</span><span class=\"param\">\t<span class=\"n\">enforce_v_plate</span>,</span><span class=\"param\">\t<span class=\"n\">largehalflen</span>,</span><span class=\"param\">\t<span class=\"n\">t_obs</span>,</span><span class=\"param\">\t<span class=\"n\">pts_surf</span></span>)</span>"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.v_plate", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.v_plate", "kind": "variable", "doc": "<p>Nominal far-field plate velocity, in the dimensions of the rheology</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_cycles_max", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_cycles_max", "kind": "variable", "doc": "<p>Maximum number of cycles to simulate [-]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_samples_per_eq", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_samples_per_eq", "kind": "variable", "doc": "<p>Number of internal evaluation timesteps between earthquakes [-]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_max", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_max", "kind": "variable", "doc": "<p>Maximum shear stress change [Pa] from coseismic slip on locked patches</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.v_max", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.v_max", "kind": "variable", "doc": "<p>Maximum slip velocity [m/s] on creeping patches</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.fault", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.fault", "kind": "variable", "doc": "<p>Fault object</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.Ds_0", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.Ds_0", "kind": "variable", "doc": "<p>Nominal coseismic left-lateral shearing [m] of the locked fault patch(es)</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.Ds_0_logsigma", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.Ds_0_logsigma", "kind": "variable", "doc": "<p>Standard deviation of the fault slip in logarithmic space</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_rec", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_rec", "kind": "variable", "doc": "<p>Nominal recurrence time [a] for each earthquake</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_rec_logsigma", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_rec_logsigma", "kind": "variable", "doc": "<p>Standard deviation of the recurrence time in logarithmic space</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.D_asp_min", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.D_asp_min", "kind": "variable", "doc": "<p>Minimum depth [m] for the asperities of each earthquake</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.D_asp_max", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.D_asp_max", "kind": "variable", "doc": "<p>Maximum depth [m] for the asperities of each earthquake</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_anchor", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_anchor", "kind": "variable", "doc": "<p>Anchor date where observations end</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_last", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_last", "kind": "variable", "doc": "<p>Dates of the last occurence for each earthquake</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.slip_mask", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.slip_mask", "kind": "variable", "doc": "<p>Mask that matches each earthquake to a fault patch</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_fullcycle", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_fullcycle", "kind": "variable", "doc": "<p>Nominal recurrence time [a] for an entire joint earthquake cycle</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_eq", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_eq", "kind": "variable", "doc": "<p>Number of distinct earthquakes in sequence</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_eq_per_asp", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_eq_per_asp", "kind": "variable", "doc": "<p>Number of earthquakes per asperity and full cycle</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_rec_per_asp", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_rec_per_asp", "kind": "variable", "doc": "<p>Recurrence time [a] realization</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.Ds_0_per_asp", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.Ds_0_per_asp", "kind": "variable", "doc": "<p>Fault slip [m] realization</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.slip_asperities", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.slip_asperities", "kind": "variable", "doc": "<p>Slip [m] for each earthquake in each asperity</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.enforce_v_plate", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.enforce_v_plate", "kind": "variable", "doc": "<p>Flag whether to allow v_plate to vary or not</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.v_plate_eff", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.v_plate_eff", "kind": "variable", "doc": "<p>Effective far-field plate velocity [m/s]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.T_eff", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.T_eff", "kind": "variable", "doc": "<p>Effective length [a] of entire earthquake sequence</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.eq_df", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.eq_df", "kind": "variable", "doc": "<p>DataFrame with the dates [decimal year from cycle start] and slips [m]\nfor each asperity</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.t_eval", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.t_eval", "kind": "variable", "doc": "<p>Internal evaluation timesteps [decimal years since cycle start]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_eval", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_eval", "kind": "variable", "doc": "<p>Number of internal evaluation timesteps [-]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_slips", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_slips", "kind": "variable", "doc": "<p>Number of slips in a sequence [-]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.ix_break", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.ix_break", "kind": "variable", "doc": "<p>Indices of breaks between cycles</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.ix_eq", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.ix_eq", "kind": "variable", "doc": "<p>Indices of earthquakes</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.t_obs", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.t_obs", "kind": "variable", "doc": "<p>Observation timesteps [decimal years since cycle start]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.t_eval_joint", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.t_eval_joint", "kind": "variable", "doc": "<p>Joint internal evaluation and external observation timesteps\n[decimal years since cycle start]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.ix_break_joint", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.ix_break_joint", "kind": "variable", "doc": "<p>Indices of breaks between cycles in joint timesteps</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.ix_eq_joint", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.ix_eq_joint", "kind": "variable", "doc": "<p>Indices of earthquakes in joint timesteps</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.ix_obs_joint", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.ix_obs_joint", "kind": "variable", "doc": "<p>Indices of observation timestamps in joint timesteps</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_unbounded", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_unbounded", "kind": "variable", "doc": "<p>Unbounded coseismic stress change [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.K_int_inv_upper", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.K_int_inv_upper", "kind": "variable", "doc": "<p>Inverse of K_int [m/Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_max_from_v_max_lower", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_max_from_v_max_lower", "kind": "variable", "doc": "<p>Maximum shear stress change [Pa] in lower plate from capped velocity</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_max_from_v_max_upper", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_max_from_v_max_upper", "kind": "variable", "doc": "<p>Maximum shear stress change [Pa] in upper plate from capped velocity</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_max_joint_upper", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_max_joint_upper", "kind": "variable", "doc": "<p>Joint maximum shear stress change [Pa] allowed in upper plate</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_max_joint_lower", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_max_joint_lower", "kind": "variable", "doc": "<p>Joint maximum shear stress change [Pa] allowed in lower plate</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.delta_tau_bounded", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.delta_tau_bounded", "kind": "variable", "doc": "<p>Bounded coseismic stress change [Pa]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.slip_taper", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.slip_taper", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.slip_taper_ts", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.slip_taper_ts", "kind": "variable", "doc": "<p>Timeseries of tapered slip [m] on the upper creeping fault patches</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.largehalflen", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.largehalflen", "kind": "variable", "doc": "<p>Fault patch half-length of the deep crreep patches [m]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.mid_deep_x1", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.mid_deep_x1", "kind": "variable", "doc": "<p>\\( x_1 \\) coordinates of deep creep fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.mid_deep_x2", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.mid_deep_x2", "kind": "variable", "doc": "<p>\\( x_2 \\) coordinates of deep creep fault patch midpoints [m]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.theta_vec_deep", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.theta_vec_deep", "kind": "variable", "doc": "<p>Plate dip angle [rad] for deep creep fault patches</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.pts_surf", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.pts_surf", "kind": "variable", "doc": "<p>\\( x_1 \\) coordinates of surface observation points [m]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.n_stations", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.n_stations", "kind": "variable", "doc": "<p>Number of surface observing stations</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.G_surf_fault", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.G_surf_fault", "kind": "variable", "doc": "<p>Green's matrix [-] relating slip on the main fault patches to surface motion</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.G_surf_deep", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.G_surf_deep", "kind": "variable", "doc": "<p>Green's matrix [-] relating slip on the deep creep patches to surface motion</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.G_surf", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.G_surf", "kind": "variable", "doc": "<p>Joint Green's matrix [-] relating slip on the entire ESPM to surface motion</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.v_plate_vec", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.v_plate_vec", "kind": "variable", "doc": "<p>Vector with the plate velocity for each creeping patch [m/s]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.v_init", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.v_init", "kind": "variable", "doc": "<p>Initial velocity in all creeping patches [m/s]</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.locked_slip", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.locked_slip", "kind": "variable", "doc": "<p>Timeseries of slip [m] on the locked patches for observation timespan</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.deep_creep_slip", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.deep_creep_slip", "kind": "variable", "doc": "<p>Timeseries of slip [m] on the deep creep patches for observation timestamps</p>\n"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.read_config_file", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.read_config_file", "kind": "function", "doc": "<p>Read a configuration file and return it as a parsed dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_file</strong> (str):\nPath to INI configuration file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>cfg_dict</strong> (dict):\nParsed configuration file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.from_config_dict", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.from_config_dict", "kind": "function", "doc": "<p>Create a SubductionSimulation object from a configuration dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cfg</strong> (dict):\nDictionary containing all parsed elements from the configuration file</li>\n<li><strong>t_obs</strong> (numpy.ndarray, pandas.DatetimeIndex):\nObservation timesteps, either as decimal years relative to the cycle start,\nor as Timestamps</li>\n<li><strong>pts_surf</strong> (numpy.ndarray):\nHorizontal landward observation coordinates [m] relative to the trench</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>read_config_file</code>:  To load a configuration file into a dictionary.  </p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">cfg</span>, </span><span class=\"param\"><span class=\"n\">t_obs</span>, </span><span class=\"param\"><span class=\"n\">pts_surf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.get_n", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.get_n", "kind": "function", "doc": "<p>Calculate the real linear viscous strength constant from the effective one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_n</strong> (float):\nNonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</li>\n<li><strong>alpha_eff</strong> (float):\nEffective linear viscous strength constant [Pa * s/m]</li>\n<li><strong>v_eff</strong> (float):\nEffective velocity [m/s] used for <code>alpha_eff</code> conversions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>n</strong> (float):\nPower-law exponent \\( n \\) [-]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha_n</span>, </span><span class=\"param\"><span class=\"n\">alpha_eff</span>, </span><span class=\"param\"><span class=\"n\">v_eff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.get_alpha_n", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.get_alpha_n", "kind": "function", "doc": "<p>Calculate the real linear viscous strength constant from the effective one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_eff</strong> (float):\nEffective linear viscous strength constant [Pa * s/m]</li>\n<li><strong>n</strong> (float):\nPower-law exponent \\( n \\) [-]</li>\n<li><strong>v_eff</strong> (float):\nEffective velocity [m/s] used for <code>alpha_eff</code> conversions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_n</strong> (float):\nNonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha_eff</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">v_eff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.get_alpha_eff", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.get_alpha_eff", "kind": "function", "doc": "<p>Calculate the effective linear viscous strength constant from the real one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_n</strong> (float):\nNonlinear viscous rheology strength constant \\( \\alpha_n \\) [Pa^n * s/m]</li>\n<li><strong>n</strong> (float):\nPower-law exponent \\( n \\) [-]</li>\n<li><strong>v_eff</strong> (float):\nEffective velocity [m/s] used for <code>alpha_eff</code> conversions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_eff</strong> (float):\nEffective linear viscous strength constant [Pa * s/m]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha_n</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">v_eff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.get_alpha_eff_from_alpha_h", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.get_alpha_eff_from_alpha_h", "kind": "function", "doc": "<p>Calculate the effective viscosity from the rate-dependent friction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_h</strong> (float):\nRate-and-state parameter \\( (a - b) * \\sigma_E \\),\nwhere \\( a \\) and \\( b \\) [-] are the rate-and-state frictional properties,\nand \\( \\sigma_E \\) [Pa] is effective fault normal stress.</li>\n<li><strong>v_eff</strong> (float):\nEffective velocity [m/s] used for <code>alpha_eff</code> conversions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha_eff</strong> (float):\nEffective linear viscous strength constant [Pa * s/m]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha_h</span>, </span><span class=\"param\"><span class=\"n\">v_eff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.run", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.run", "kind": "function", "doc": "<p>Run a full simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">simple_rk4</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.zero_obs_at_eq", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.zero_obs_at_eq", "kind": "function", "doc": "<p>Reset to zero the surface displacement timeseries every time an earthquake happens.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">surf_disps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_surface_displacements", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_surface_displacements", "kind": "function", "doc": "<p>Plot the observers' surface displacement timeseries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_zeroed</strong> (numpy.ndarray):\nSurface displacements as output by <code>~zero_obs_at_eq()</code>.</li>\n<li><strong>obs_noisy</strong> (numpy.ndarray, optional):\nNoisy surface observations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs_zeroed</span>, </span><span class=\"param\"><span class=\"n\">obs_noisy</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_fault_velocities", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_fault_velocities", "kind": "function", "doc": "<p>Plot the velocities on all creeping fault patches.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_fault_slip", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_fault_slip", "kind": "function", "doc": "<p>Plot the cumulative slip (deficit) for the fault patches.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n<li><strong>deficit</strong> (bool, optional):\nIf <code>True</code> (default), remove the plate velocity to plot slip deficit,\notherwise keep it included.</li>\n<li><strong>include_locked</strong> (bool, optional):\nIf <code>True</code> (default), also plot the slip on the locked patches.</li>\n<li><strong>include_deep</strong> (bool, optional):\nIf <code>True</code> (default), also plot the slip on the semi-infinite patches\nat the end of the interfaces.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">full_state</span>,</span><span class=\"param\">\t<span class=\"n\">deficit</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_locked</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_deep</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_eq_velocities", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_eq_velocities", "kind": "function", "doc": "<p>Plot the before and after velocities on all creeping fault patches\nfor each distinct earthquake.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_fault", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_fault", "kind": "function", "doc": "<p>Plot the fault.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_slip_phases", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_slip_phases", "kind": "function", "doc": "<p>Plot the cumulative slip on the fault for the three different\nphases (coseismic, early postseismic, and interseismic).</p>\n\n<p>Only works if there is a single earthquake in the sequence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n<li><strong>post_inter_transition</strong> (float, optional):\nFraction of the recurrence time that should be considered\nearly postseismic and not interseismic.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_state</span>, </span><span class=\"param\"><span class=\"n\">post_inter_transition</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_viscosity", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_viscosity", "kind": "function", "doc": "<p>Plot the viscosity structure with depth for the steady state, as well as\nfor the immediate pre- and coseismic velocities.</p>\n\n<p>For multiple earthquakes, it will use the minimum preseismic and maximum\npostseismic velocities.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n<li><strong>return_viscosities</strong> (bool, optional):\nAlso return the preseismic, steady-state, and postseismic viscosities.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_state</span>, </span><span class=\"param\"><span class=\"n\">return_viscosities</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "seqeas.subduction2d.SubductionSimulation.plot_viscosity_timeseries", "modulename": "seqeas.subduction2d", "qualname": "SubductionSimulation.plot_viscosity_timeseries", "kind": "function", "doc": "<p>Plot the viscosity timeseries with depth for the entire last cycle.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_state</strong> (numpy.ndarray):\nState matrix as output from <code>~run()</code>.</li>\n<li><strong>return_viscosities</strong> (bool, optional):\nAlso return the viscosity timeseries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matplotlib.figure.Figure</strong></li>\n<li><strong>matplotlib.axes.Axes</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">full_state</span>, </span><span class=\"param\"><span class=\"n\">return_viscosities</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();